generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(cuid())
  email                   String           @unique
  name                    String?
  role                    String           @default("user")
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  bannedAt                DateTime?
  bannedBy                String?
  banReason               String?
  banExpiresAt            DateTime?
  deletedAt               DateTime?
  lastLoginAt             DateTime       @default(now())

  // Personal Information
  firstName               String?
  lastName                String?
  phoneNumber             String?
  address1                String?
  address2                String?
  city                    String?
  state                   String?
  postalCode              String?
  country                 String?
  businessName            String?
  businessType            String?          // "individual" or "company"
  paypalEmail             String?
  stripeConnectedAccountId String?
  dateOfBirth            DateTime?

  // Referral System
  platformReferredByEmail  String?
  platformReferredEmails   String[]           @default([])
  platformReferralEarnings Float              @default(0)
  
  // User's Brands
  brandAccess     BrandAccess[]

  // User's orders
  orderIds                String[]           @default([])

  // Relationships
  affiliateFor            Affiliate[] @relation("Affiliate")
  orders                  Order[]
  activities              UserActivity[]
  payouts                 Payout[]
  analytics               Analytics[]

  // Platform referral relationships
  referredByMe            PlatformReferral[]       @relation("PlatformReferredBy")
  referredMe              PlatformReferral[]       @relation("PlatformReferredUser")
  referralLinks           PlatformReferralLink[]

  paymentMethods          PaymentMethod[]

  reports                 Report[]  @relation("ReportedBy")
  reportedItems           Report[]  @relation("ReportedUser")

  modifiedGenres    Genre[]   @relation("GenreModifiedBy")

  @@index([email])
  @@index([role])
  @@index([platformReferredByEmail])
}

model Brand {
  id             String    @id @default(cuid())
  name           String    @unique
  brandId        String    @unique
  description    String?
  tagline        String?
  imageUrl       String?
  colors         String[]  @default([])
  
  // Social Media Fields
  website        String?
  facebook       String?
  instagram      String?
  twitter        String?
  telegram       String?
  customLink1    String?
  customLink2    String?
  customLink3    String?

  totalSales     Float     @default(0)
  totalEarnings  Float     @default(0)
  commissionRate Float     @default(0.5)
  minCommission  Float     @default(0.5)
  maxCommission  Float     @default(0.8)
  isApproved     Boolean   @default(false)
  isFeatured     Boolean   @default(false)
  isDeleted      Boolean   @default(false)
  isHidden       Boolean   @default(true)
  isBanned       Boolean   @default(false)
  deletedAt      DateTime?
  deletedBy      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastModifiedAt DateTime  @default(now())
  lastModifiedByEmail String?

  totalOrders       Int       @default(0)
  totalClicks       Int       @default(0)
  conversionRate    Float     @default(0)
  averageOrderValue Float     @default(0)

  // Access Control
  access          BrandAccess[]

  products         Product[]
  affiliates       Affiliate[]
  orders           Order[]
  genres           Genre[]    @relation("BrandGenres")
  reports          Report[]   @relation("ReportedBrand")

  @@index([brandId])
}

model Product {
  id                String    @id @default(cuid())
  name             String
  description      String?
  imageUrl         String?
  isHidden         Boolean   @default(false)
  isDeleted        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastModifiedAt   DateTime  @default(now())
  lastModifiedByEmail String?
  rejectionReason  String?
  price            Float
  brandId          String
  brand            Brand       @relation(fields: [brandId], references: [id])
  totalViews       Int         @default(0)
  totalClicks      Int         @default(0)
  totalSales       Int         @default(0)
  totalRevenue      Float       @default(0)
  reports          Report[]    @relation("ReportedProduct")

  @@index([brandId])
}

model Affiliate {
  id              String    @id @default(cuid())
  email           String
  user            User        @relation("Affiliate", fields: [email], references: [email])
  brandId         String
  brand           Brand         @relation(fields: [brandId], references: [id])
  affiliateRate  Float         @default(0.10)
  totalSales      Float         @default(0)
  totalDue        Float         @default(0)
  totalPaid       Float         @default(0)
  clickCount      Int           @default(0)
  conversionRate  Float           @default(0)
  lastPaidAt      DateTime?
  orders          Order[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([email, brandId])
  @@index([email])
  @@index([brandId])
}

model Order {
  id            String     @id @default(cuid())
  brandId       String
  brand         Brand        @relation(fields: [brandId], references: [id])
  affiliateId   String?
  affiliate     Affiliate?   @relation(fields: [affiliateId], references: [id])
  platformReferredByEmail String?
  totalAmount   Float
  brandEarnings Float
  platformReferredByDue Float
  affiliateDue  Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userEmail     String?
  user          User?          @relation(fields: [userEmail], references: [email])

  @@index([brandId])
  @@index([affiliateId])
  @@index([platformReferredByEmail])
}

model Payout {
  id               String   @id @default(cuid())
  userEmail        String
  user             User         @relation(fields: [userEmail], references: [email])
  amount           Float
  status           String     @default("pending")
  failureReason    String?
  stripeTransferId String       @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([userEmail])
  @@index([stripeTransferId])
}

model UserActivity {
  id        String   @id @default(cuid())
  userEmail String
  user      User         @relation(fields: [userEmail], references: [email])
  type      String
  details   Json?
  createdAt DateTime        @default(now())

  @@index([userEmail])
}

model Analytics {
  id        String   @id @default(cuid())
  type      String
  data      Json
  userEmail String?
  brandId   String?
  createdAt DateTime        @default(now())
  user      User?            @relation(fields: [userEmail], references: [email])

  @@index([type])
  @@index([userEmail])
  @@index([brandId])
}

model Genre {
  id                String    @id @default(cuid())
  name              String    @unique
  isHidden          Boolean   @default(true)
  lastModifiedAt    DateTime  @default(now())
  lastModifiedByEmail String?
  modifiedBy        User?     @relation("GenreModifiedBy", fields: [lastModifiedByEmail], references: [email])
  linkedGenres      String[]  @default([])
  brands            Brand[]   @relation("BrandGenres")

  @@index([lastModifiedByEmail])
}

model PlatformReferralLink {
  id        String   @id @default(cuid())
  email     String
  user      User         @relation(fields: [email], references: [email])
  code      String       @unique
  isActive  Boolean        @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  platformReferrals PlatformReferral[]

  @@index([email])
  @@index([code])
}

model PlatformReferral {
  id                     String    @id @default(cuid())
  platformReferredByEmail String
  platformReferredBy     User          @relation("PlatformReferredBy", fields: [platformReferredByEmail], references: [email])
  platformReferredEmail  String?
  platformReferredUser   User?           @relation("PlatformReferredUser", fields: [platformReferredEmail], references: [email])
  platformReferralLinkId String
  platformReferralLink   PlatformReferralLink @relation(fields: [platformReferralLinkId], references: [id])
  earnings              Float             @default(0)
  completedAt           DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([platformReferredByEmail])
  @@index([platformReferredEmail])
  @@index([platformReferralLinkId])
}

model Report {
  id            String   @id @default(cuid())
  type          String
  targetId      String
  reporterEmail String
  status        String   @default("pending")
  reason        String
  details       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  actionNotes   String?

  // Relations with proper constraint names
  reporter      User      @relation("ReportedBy", fields: [reporterEmail], references: [email])
  reportedUser  User?     @relation("ReportedUser", fields: [targetId], references: [id], map: "Report_reportedUser_fkey")
  reportedBrand Brand?    @relation("ReportedBrand", fields: [targetId], references: [id], map: "Report_reportedBrand_fkey")
  reportedProduct Product? @relation("ReportedProduct", fields: [targetId], references: [id], map: "Report_reportedProduct_fkey")

  @@index([reporterEmail])
  @@index([targetId])
}

model PaymentMethod {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  provider          String    // e.g. "stripe", "paypal", etc.
  type              String    // "pay", "receive", "both"
  providerAccountId String?   // External account ID from the provider
  isDefault         Boolean   @default(false)
  metadata          Json?     // Store provider-specific data
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, provider])
}

model BrandAccess {
  id        String   @id @default(cuid())
  brandId   String
  brand     Brand    @relation(fields: [brandId], references: [brandId], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      String   // "owner" or "manager"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, brandId])
  @@index([userId])
  @@index([brandId])
}
